#!/usr/bin/env node
require('dotenv').config();

const fs = require('fs');
const path = require('path');
const Promise = require('bluebird');

const ProgressBar = require('cli-progress').Bar;
const Schema = require('@asl/schema');

const Migrator = require('../lib/migrator');
const config = require('../config');

const db = Schema(config);

const input = require('minimist')(process.argv.slice(2), { boolean: ['drop'] });

const files = input._.sort();

const readFile = file => {
  return new Promise((resolve, reject) => {
    fs.readFile(path.resolve(process.cwd(), file), (err, data) => {
      return err ? reject(err) : resolve(data);
    });
  });
}

Promise.resolve()
  .then(() => {
    if (input.drop) {
      return db.sync({ force: true });
    }
  })
  .then(() => {
    return Promise.mapSeries(files, file => {
      return readFile(file)
        .then(data => {
          console.log(file);
          const progress = new ProgressBar({
            format: '[{bar}] {percentage}%'
          });
          progress.start(100);
          const migrator = new Migrator(data, { db });
          migrator.on('message', msg => {
            const { total, done } = msg;
            if (total && done) {
              progress.update(Math.round(100 * done / total));
            }
          });
          return migrator.migrate()
            .then(() => progress.stop())
            .catch(e => {
              progress.stop();
              throw e;
            });
        });
    });
  })
  .then(() => {
    return db.close();
  })
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
